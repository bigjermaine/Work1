// AUTO GENERATED. DO NOT EDIT THIS FILE.
// VERSION 3.5.0 | Last Modified Time: Thu Oct 19 2023 17:57:39 GMT+0200 (Central European Summer Time)
// Copyright Â© 2023 Dexcom, Inc. All rights reserved.

import Foundation
import SwiftUI

public extension View {
    public func textStyle(_ style: PolarisTextStyle) -> some View {
        modifier(PolarisDesignTextStyleViewModifier(style: style))
    }
}

public struct PolarisTextStyle {
    public let font: Font
    public let color: Color

    /// Font size: **66**
    /// Height: **84**
    /// Font weights: **light**
    public static let headline1 = PolarisTextStyles.Headline1()
    /// Font size: **56**
    /// Height: **66**
    /// Font weights: **bold, regular**
    public static let headline2 = PolarisTextStyles.Headline2()
    /// Font size: **46**
    /// Height: **54**
    /// Font weights: **medium**
    public static let headline3 = PolarisTextStyles.Headline3()
    /// Font size: **40**
    /// Height: **48**
    /// Font weights: **regular, bold, semibold**
    public static let headline4 = PolarisTextStyles.Headline4()
    /// Font size: **34**
    /// Height: **40**
    /// Font weights: **bold**
    public static let headline5 = PolarisTextStyles.Headline5()
    /// Font size: **30**
    /// Height: **36**
    /// Font weights: **regular, medium, semibold, bold**
    public static let title1 = PolarisTextStyles.Title1()
    /// Font size: **26**
    /// Height: **32**
    /// Font weights: **semibold, regular**
    public static let title2 = PolarisTextStyles.Title2()
    /// Font size: **22**
    /// Height: **28**
    /// Font weights: **regular, medium**
    public static let title3 = PolarisTextStyles.Title3()
    /// Font size: **20**
    /// Height: **24**
    /// Font weights: **regular, medium, semibold, bold**
    public static let title4 = PolarisTextStyles.Title4()
    /// Font size: **18**
    /// Height: **24**
    /// Font weights: **regular, medium, bold**
    public static let body1 = PolarisTextStyles.Body1()
    /// Font size: **17**
    /// Height: **22**
    /// Font weights: **regular, semibold**
    public static let body2 = PolarisTextStyles.Body2()
    /// Font size: **16**
    /// Height: **20**
    /// Font weights: **regular, medium, semibold, bold**
    public static let body3 = PolarisTextStyles.Body3()
    /// Font size: **15**
    /// Height: **20**
    /// Font weights: **regular, semibold, medium**
    public static let footnote1 = PolarisTextStyles.Footnote1()
    /// Font size: **14**
    /// Height: **18**
    /// Font weights: **regular, medium, semibold**
    public static let footnote2 = PolarisTextStyles.Footnote2()
    /// Font size: **13**
    /// Height: **18**
    /// Font weights: **regular, medium**
    public static let footnote3 = PolarisTextStyles.Footnote3()
    /// Font size: **12**
    /// Height: **16**
    /// Font weights: **regular, medium, semibold**
    public static let caption1 = PolarisTextStyles.Caption1()
    /// Font size: **11**
    /// Height: **13**
    /// Font weights: **medium**
    public static let caption2 = PolarisTextStyles.Caption2()
    /// Font size: **10**
    /// Height: **14**
    /// Font weights: **medium**
    public static let caption3 = PolarisTextStyles.Caption3()
}

public struct PolarisDesignTextStyleViewModifier: ViewModifier {
    public let style: PolarisTextStyle

    public func body(content: Content) -> some View {
        content.font(style.font).foregroundColor(style.color)
    }
}

public struct PolarisTextStyles {
    public struct Headline1 {
        public let light = Headline1Color(weight: .light)
        
        public struct Headline1Color {
            /// Light: [dexGray800]
            /// Dark: [dexGray200]
            public let textPrimary: PolarisTextStyle                
            private let weight: Font.Weight

            init(weight: Font.Weight) {
                self.weight = weight

                textPrimary = PolarisTextStyle(
                    font: .system(size: 66, weight: weight),
                    color: .polarisColors.textPrimary
                )
            }
        }
    }

    public struct Headline2 {
        public let bold = Headline2Color(weight: .bold)
        public let regular = Headline2Color(weight: .regular)
        
        public struct Headline2Color {
            /// Light: [dexGray800]
            /// Dark: [dexGray200]
            public let textPrimary: PolarisTextStyle                
            private let weight: Font.Weight

            init(weight: Font.Weight) {
                self.weight = weight

                textPrimary = PolarisTextStyle(
                    font: .system(size: 56, weight: weight),
                    color: .polarisColors.textPrimary
                )
            }
        }
    }

    public struct Headline3 {
        public let medium = Headline3Color(weight: .medium)
        
        public struct Headline3Color {
            /// Light: [dexGray800]
            /// Dark: [dexGray200]
            public let textPrimary: PolarisTextStyle
            /// Light: [dexGray0]
            /// Dark: [dexGray850]
            public let textPrimaryInverse: PolarisTextStyle
            /// Light: [dexGray800]
            /// Dark: [dexYellow300]
            public let textPrimaryVariant: PolarisTextStyle
            /// Light: [dexGray0]
            /// Dark: [dexRed300]
            public let textPrimaryInverseVariant: PolarisTextStyle                
            private let weight: Font.Weight

            init(weight: Font.Weight) {
                self.weight = weight

                textPrimary = PolarisTextStyle(
                    font: .system(size: 46, weight: weight),
                    color: .polarisColors.textPrimary
                )
                textPrimaryInverse = PolarisTextStyle(
                    font: .system(size: 46, weight: weight),
                    color: .polarisColors.textPrimaryInverse
                )
                textPrimaryVariant = PolarisTextStyle(
                    font: .system(size: 46, weight: weight),
                    color: .polarisColors.textPrimaryVariant
                )
                textPrimaryInverseVariant = PolarisTextStyle(
                    font: .system(size: 46, weight: weight),
                    color: .polarisColors.textPrimaryInverseVariant
                )
            }
        }
    }

    public struct Headline4 {
        public let regular = Headline4Color(weight: .regular)
        public let bold = Headline4Color(weight: .bold)
        public let semibold = Headline4Color(weight: .semibold)
        
        public struct Headline4Color {
            /// Light: [dexGray800]
            /// Dark: [dexGray200]
            public let textPrimary: PolarisTextStyle                
            private let weight: Font.Weight

            init(weight: Font.Weight) {
                self.weight = weight

                textPrimary = PolarisTextStyle(
                    font: .system(size: 40, weight: weight),
                    color: .polarisColors.textPrimary
                )
            }
        }
    }

    public struct Headline5 {
        public let bold = Headline5Color(weight: .bold)
        
        public struct Headline5Color {
            /// Light: [dexGray800]
            /// Dark: [dexGray200]
            public let textPrimary: PolarisTextStyle
            /// Light: [dexGreen500]
            /// Dark: [dexGreen400]
            public let textDecorative1: PolarisTextStyle                
            private let weight: Font.Weight

            init(weight: Font.Weight) {
                self.weight = weight

                textPrimary = PolarisTextStyle(
                    font: .system(size: 34, weight: weight),
                    color: .polarisColors.textPrimary
                )
                textDecorative1 = PolarisTextStyle(
                    font: .system(size: 34, weight: weight),
                    color: .polarisColors.textDecorative1
                )
            }
        }
    }

    public struct Title1 {
        public let regular = Title1Color(weight: .regular)
        public let medium = Title1Color(weight: .medium)
        public let semibold = Title1Color(weight: .semibold)
        public let bold = Title1Color(weight: .bold)
        
        public struct Title1Color {
            /// Light: [dexGray800]
            /// Dark: [dexGray200]
            public let textPrimary: PolarisTextStyle
            /// Light: [dexGray0]
            /// Dark: [dexGray850]
            public let textPrimaryInverse: PolarisTextStyle
            /// Light: [dexGreen500]
            /// Dark: [dexGreen400]
            public let textDecorative1: PolarisTextStyle
            /// Light: [dexGray800]
            /// Dark: [dexYellow300]
            public let textPrimaryVariant: PolarisTextStyle
            /// Light: [dexGray0]
            /// Dark: [dexRed300]
            public let textPrimaryInverseVariant: PolarisTextStyle                
            private let weight: Font.Weight

            init(weight: Font.Weight) {
                self.weight = weight

                textPrimary = PolarisTextStyle(
                    font: .system(size: 30, weight: weight),
                    color: .polarisColors.textPrimary
                )
                textPrimaryInverse = PolarisTextStyle(
                    font: .system(size: 30, weight: weight),
                    color: .polarisColors.textPrimaryInverse
                )
                textDecorative1 = PolarisTextStyle(
                    font: .system(size: 30, weight: weight),
                    color: .polarisColors.textDecorative1
                )
                textPrimaryVariant = PolarisTextStyle(
                    font: .system(size: 30, weight: weight),
                    color: .polarisColors.textPrimaryVariant
                )
                textPrimaryInverseVariant = PolarisTextStyle(
                    font: .system(size: 30, weight: weight),
                    color: .polarisColors.textPrimaryInverseVariant
                )
            }
        }
    }

    public struct Title2 {
        public let semibold = Title2Color(weight: .semibold)
        public let regular = Title2Color(weight: .regular)
        
        public struct Title2Color {
            /// Light: [dexGray800]
            /// Dark: [dexGray200]
            public let textPrimary: PolarisTextStyle
            /// Light: [dexGreen500]
            /// Dark: [dexGreen400]
            public let textDecorative1: PolarisTextStyle
            /// Light: [dexGray600]
            /// Dark: [dexGray350]
            public let interactivePrimary: PolarisTextStyle
            /// Light: [dexGray800]
            /// Dark: [dexYellow300]
            public let textPrimaryVariant: PolarisTextStyle
            /// Light: [dexGray0]
            /// Dark: [dexRed300]
            public let textPrimaryInverseVariant: PolarisTextStyle                
            private let weight: Font.Weight

            init(weight: Font.Weight) {
                self.weight = weight

                textPrimary = PolarisTextStyle(
                    font: .system(size: 26, weight: weight),
                    color: .polarisColors.textPrimary
                )
                textDecorative1 = PolarisTextStyle(
                    font: .system(size: 26, weight: weight),
                    color: .polarisColors.textDecorative1
                )
                interactivePrimary = PolarisTextStyle(
                    font: .system(size: 26, weight: weight),
                    color: .polarisColors.interactivePrimary
                )
                textPrimaryVariant = PolarisTextStyle(
                    font: .system(size: 26, weight: weight),
                    color: .polarisColors.textPrimaryVariant
                )
                textPrimaryInverseVariant = PolarisTextStyle(
                    font: .system(size: 26, weight: weight),
                    color: .polarisColors.textPrimaryInverseVariant
                )
            }
        }
    }

    public struct Title3 {
        public let regular = Title3Color(weight: .regular)
        public let medium = Title3Color(weight: .medium)
        
        public struct Title3Color {
            /// Light: [dexGray800]
            /// Dark: [dexGray200]
            public let textPrimary: PolarisTextStyle
            /// Light: [dexGreen500]
            /// Dark: [dexGreen400]
            public let textDecorative1: PolarisTextStyle
            /// Light: [dexGray800]
            /// Dark: [dexYellow300]
            public let textPrimaryVariant: PolarisTextStyle
            /// Light: [dexGray0]
            /// Dark: [dexRed300]
            public let textPrimaryInverseVariant: PolarisTextStyle                
            private let weight: Font.Weight

            init(weight: Font.Weight) {
                self.weight = weight

                textPrimary = PolarisTextStyle(
                    font: .system(size: 22, weight: weight),
                    color: .polarisColors.textPrimary
                )
                textDecorative1 = PolarisTextStyle(
                    font: .system(size: 22, weight: weight),
                    color: .polarisColors.textDecorative1
                )
                textPrimaryVariant = PolarisTextStyle(
                    font: .system(size: 22, weight: weight),
                    color: .polarisColors.textPrimaryVariant
                )
                textPrimaryInverseVariant = PolarisTextStyle(
                    font: .system(size: 22, weight: weight),
                    color: .polarisColors.textPrimaryInverseVariant
                )
            }
        }
    }

    public struct Title4 {
        public let regular = Title4Color(weight: .regular)
        public let medium = Title4Color(weight: .medium)
        public let semibold = Title4Color(weight: .semibold)
        public let bold = Title4Color(weight: .bold)
        
        public struct Title4Color {
            /// Light: [dexGray800]
            /// Dark: [dexGray200]
            public let textPrimary: PolarisTextStyle
            /// Light: [dexGray0]
            /// Dark: [dexGray850]
            public let textPrimaryInverse: PolarisTextStyle
            /// Light: [dexGreen500]
            /// Dark: [dexGreen400]
            public let textDecorative1: PolarisTextStyle
            /// Light: [dexRed500]
            /// Dark: [dexRed400]
            public let interactiveDestructive: PolarisTextStyle
            /// Light: [dexGray500]
            /// Dark: [dexGray400]
            public let interactiveTertiary: PolarisTextStyle
            /// Light: [dexGray800]
            /// Dark: [dexYellow300]
            public let textPrimaryVariant: PolarisTextStyle
            /// Light: [dexGray0]
            /// Dark: [dexRed300]
            public let textPrimaryInverseVariant: PolarisTextStyle                
            private let weight: Font.Weight

            init(weight: Font.Weight) {
                self.weight = weight

                textPrimary = PolarisTextStyle(
                    font: .system(size: 20, weight: weight),
                    color: .polarisColors.textPrimary
                )
                textPrimaryInverse = PolarisTextStyle(
                    font: .system(size: 20, weight: weight),
                    color: .polarisColors.textPrimaryInverse
                )
                textDecorative1 = PolarisTextStyle(
                    font: .system(size: 20, weight: weight),
                    color: .polarisColors.textDecorative1
                )
                interactiveDestructive = PolarisTextStyle(
                    font: .system(size: 20, weight: weight),
                    color: .polarisColors.interactiveDestructive
                )
                interactiveTertiary = PolarisTextStyle(
                    font: .system(size: 20, weight: weight),
                    color: .polarisColors.interactiveTertiary
                )
                textPrimaryVariant = PolarisTextStyle(
                    font: .system(size: 20, weight: weight),
                    color: .polarisColors.textPrimaryVariant
                )
                textPrimaryInverseVariant = PolarisTextStyle(
                    font: .system(size: 20, weight: weight),
                    color: .polarisColors.textPrimaryInverseVariant
                )
            }
        }
    }

    public struct Body1 {
        public let regular = Body1Color(weight: .regular)
        public let medium = Body1Color(weight: .medium)
        public let bold = Body1Color(weight: .bold)
        
        public struct Body1Color {
            /// Light: [dexGray800]
            /// Dark: [dexGray200]
            public let textPrimary: PolarisTextStyle
            /// Light: [dexGray0]
            /// Dark: [dexGray850]
            public let textPrimaryInverse: PolarisTextStyle
            /// Light: [dexGreen500]
            /// Dark: [dexGreen400]
            public let textDecorative1: PolarisTextStyle
            /// Light: [dexGray600]
            /// Dark: [dexGray350]
            public let interactivePrimary: PolarisTextStyle
            /// Light: [dexGray500]
            /// Dark: [dexGray400]
            public let interactiveTertiary: PolarisTextStyle
            /// Light: [dexRed500]
            /// Dark: [dexRed400]
            public let interactiveDestructive: PolarisTextStyle
            /// Light: [dexGray500]
            /// Dark: [dexGray400]
            public let textSecondary: PolarisTextStyle
            /// Light: [dexGray0]
            /// Dark: [dexGray750]
            public let interactivePrimaryInverse: PolarisTextStyle
            /// Light: [dexGray500]
            /// Dark: [dexGray250]
            public let interactivePrimaryVariant1: PolarisTextStyle
            /// Light: [dexGray400]
            /// Dark: [dexGray300]
            public let interactiveTertiaryVariant1: PolarisTextStyle
            /// Light: [dexGray250]
            /// Dark: [dexGray650]
            public let interactiveSecondaryVariant1: PolarisTextStyle
            /// Light: [dexRed400]
            /// Dark: [dexRed300]
            public let interactiveDestructiveVariant1: PolarisTextStyle
            /// Light: [dexGray200]
            /// Dark: [dexGray750]
            public let interactiveSecondary: PolarisTextStyle
            /// Light: [dexGreen500]
            /// Dark: [dexGreen400]
            public let interactiveAccent1: PolarisTextStyle                
            private let weight: Font.Weight

            init(weight: Font.Weight) {
                self.weight = weight

                textPrimary = PolarisTextStyle(
                    font: .system(size: 18, weight: weight),
                    color: .polarisColors.textPrimary
                )
                textPrimaryInverse = PolarisTextStyle(
                    font: .system(size: 18, weight: weight),
                    color: .polarisColors.textPrimaryInverse
                )
                textDecorative1 = PolarisTextStyle(
                    font: .system(size: 18, weight: weight),
                    color: .polarisColors.textDecorative1
                )
                interactivePrimary = PolarisTextStyle(
                    font: .system(size: 18, weight: weight),
                    color: .polarisColors.interactivePrimary
                )
                interactiveTertiary = PolarisTextStyle(
                    font: .system(size: 18, weight: weight),
                    color: .polarisColors.interactiveTertiary
                )
                interactiveDestructive = PolarisTextStyle(
                    font: .system(size: 18, weight: weight),
                    color: .polarisColors.interactiveDestructive
                )
                textSecondary = PolarisTextStyle(
                    font: .system(size: 18, weight: weight),
                    color: .polarisColors.textSecondary
                )
                interactivePrimaryInverse = PolarisTextStyle(
                    font: .system(size: 18, weight: weight),
                    color: .polarisColors.interactivePrimaryInverse
                )
                interactivePrimaryVariant1 = PolarisTextStyle(
                    font: .system(size: 18, weight: weight),
                    color: .polarisColors.interactivePrimaryVariant1
                )
                interactiveTertiaryVariant1 = PolarisTextStyle(
                    font: .system(size: 18, weight: weight),
                    color: .polarisColors.interactiveTertiaryVariant1
                )
                interactiveSecondaryVariant1 = PolarisTextStyle(
                    font: .system(size: 18, weight: weight),
                    color: .polarisColors.interactiveSecondaryVariant1
                )
                interactiveDestructiveVariant1 = PolarisTextStyle(
                    font: .system(size: 18, weight: weight),
                    color: .polarisColors.interactiveDestructiveVariant1
                )
                interactiveSecondary = PolarisTextStyle(
                    font: .system(size: 18, weight: weight),
                    color: .polarisColors.interactiveSecondary
                )
                interactiveAccent1 = PolarisTextStyle(
                    font: .system(size: 18, weight: weight),
                    color: .polarisColors.interactiveAccent1
                )
            }
        }
    }

    public struct Body2 {
        public let regular = Body2Color(weight: .regular)
        public let semibold = Body2Color(weight: .semibold)
        
        public struct Body2Color {
            /// Light: [dexGray800]
            /// Dark: [dexGray200]
            public let textPrimary: PolarisTextStyle
            /// Light: [dexGray500]
            /// Dark: [dexGray400]
            public let textSecondary: PolarisTextStyle
            /// Light: [dexGreen500]
            /// Dark: [dexGreen400]
            public let textDecorative1: PolarisTextStyle
            /// Light: [dexGray500]
            /// Dark: [dexGray400]
            public let interactiveTertiary: PolarisTextStyle
            /// Light: [dexRed400]
            /// Dark: [dexRed300]
            public let statusDanger: PolarisTextStyle                
            private let weight: Font.Weight

            init(weight: Font.Weight) {
                self.weight = weight

                textPrimary = PolarisTextStyle(
                    font: .system(size: 17, weight: weight),
                    color: .polarisColors.textPrimary
                )
                textSecondary = PolarisTextStyle(
                    font: .system(size: 17, weight: weight),
                    color: .polarisColors.textSecondary
                )
                textDecorative1 = PolarisTextStyle(
                    font: .system(size: 17, weight: weight),
                    color: .polarisColors.textDecorative1
                )
                interactiveTertiary = PolarisTextStyle(
                    font: .system(size: 17, weight: weight),
                    color: .polarisColors.interactiveTertiary
                )
                statusDanger = PolarisTextStyle(
                    font: .system(size: 17, weight: weight),
                    color: .polarisColors.statusDanger
                )
            }
        }
    }

    public struct Body3 {
        public let regular = Body3Color(weight: .regular)
        public let medium = Body3Color(weight: .medium)
        public let semibold = Body3Color(weight: .semibold)
        public let bold = Body3Color(weight: .bold)
        
        public struct Body3Color {
            /// Light: [dexGray800]
            /// Dark: [dexGray200]
            public let textPrimary: PolarisTextStyle
            /// Light: [dexGray500]
            /// Dark: [dexGray400]
            public let textSecondary: PolarisTextStyle
            /// Light: [dexGray0]
            /// Dark: [dexGray850]
            public let textPrimaryInverse: PolarisTextStyle
            /// Light: [dexGreen500]
            /// Dark: [dexGreen400]
            public let textDecorative1: PolarisTextStyle
            /// Light: [dexGray0]
            /// Dark: [dexGray750]
            public let interactivePrimaryInverse: PolarisTextStyle
            /// Light: [dexGray500]
            /// Dark: [dexGray250]
            public let interactivePrimaryVariant1: PolarisTextStyle
            /// Light: [dexGray500]
            /// Dark: [dexGray400]
            public let interactiveTertiary: PolarisTextStyle
            /// Light: [dexGray400]
            /// Dark: [dexGray300]
            public let interactiveTertiaryVariant1: PolarisTextStyle
            /// Light: [dexGray250]
            /// Dark: [dexGray650]
            public let interactiveSecondaryVariant1: PolarisTextStyle
            /// Light: [dexRed400]
            /// Dark: [dexRed300]
            public let interactiveDestructiveVariant1: PolarisTextStyle
            /// Light: [dexRed400]
            /// Dark: [dexRed300]
            public let statusDanger: PolarisTextStyle                
            private let weight: Font.Weight

            init(weight: Font.Weight) {
                self.weight = weight

                textPrimary = PolarisTextStyle(
                    font: .system(size: 16, weight: weight),
                    color: .polarisColors.textPrimary
                )
                textSecondary = PolarisTextStyle(
                    font: .system(size: 16, weight: weight),
                    color: .polarisColors.textSecondary
                )
                textPrimaryInverse = PolarisTextStyle(
                    font: .system(size: 16, weight: weight),
                    color: .polarisColors.textPrimaryInverse
                )
                textDecorative1 = PolarisTextStyle(
                    font: .system(size: 16, weight: weight),
                    color: .polarisColors.textDecorative1
                )
                interactivePrimaryInverse = PolarisTextStyle(
                    font: .system(size: 16, weight: weight),
                    color: .polarisColors.interactivePrimaryInverse
                )
                interactivePrimaryVariant1 = PolarisTextStyle(
                    font: .system(size: 16, weight: weight),
                    color: .polarisColors.interactivePrimaryVariant1
                )
                interactiveTertiary = PolarisTextStyle(
                    font: .system(size: 16, weight: weight),
                    color: .polarisColors.interactiveTertiary
                )
                interactiveTertiaryVariant1 = PolarisTextStyle(
                    font: .system(size: 16, weight: weight),
                    color: .polarisColors.interactiveTertiaryVariant1
                )
                interactiveSecondaryVariant1 = PolarisTextStyle(
                    font: .system(size: 16, weight: weight),
                    color: .polarisColors.interactiveSecondaryVariant1
                )
                interactiveDestructiveVariant1 = PolarisTextStyle(
                    font: .system(size: 16, weight: weight),
                    color: .polarisColors.interactiveDestructiveVariant1
                )
                statusDanger = PolarisTextStyle(
                    font: .system(size: 16, weight: weight),
                    color: .polarisColors.statusDanger
                )
            }
        }
    }

    public struct Footnote1 {
        public let regular = Footnote1Color(weight: .regular)
        public let semibold = Footnote1Color(weight: .semibold)
        public let medium = Footnote1Color(weight: .medium)
        
        public struct Footnote1Color {
            /// Light: [dexGray800]
            /// Dark: [dexGray200]
            public let textPrimary: PolarisTextStyle
            /// Light: [dexGray500]
            /// Dark: [dexGray400]
            public let textSecondary: PolarisTextStyle                
            private let weight: Font.Weight

            init(weight: Font.Weight) {
                self.weight = weight

                textPrimary = PolarisTextStyle(
                    font: .system(size: 15, weight: weight),
                    color: .polarisColors.textPrimary
                )
                textSecondary = PolarisTextStyle(
                    font: .system(size: 15, weight: weight),
                    color: .polarisColors.textSecondary
                )
            }
        }
    }

    public struct Footnote2 {
        public let regular = Footnote2Color(weight: .regular)
        public let medium = Footnote2Color(weight: .medium)
        public let semibold = Footnote2Color(weight: .semibold)
        
        public struct Footnote2Color {
            /// Light: [dexGray500]
            /// Dark: [dexGray400]
            public let textSecondary: PolarisTextStyle
            /// Light: [dexGray0]
            /// Dark: [dexGray850]
            public let textPrimaryInverse: PolarisTextStyle
            /// Light: [dexGray500]
            /// Dark: [dexGray400]
            public let interactiveTertiary: PolarisTextStyle
            /// Light: [dexGray800]
            /// Dark: [dexYellow300]
            public let textPrimaryVariant: PolarisTextStyle
            /// Light: [dexGray0]
            /// Dark: [dexRed300]
            public let textPrimaryInverseVariant: PolarisTextStyle                
            private let weight: Font.Weight

            init(weight: Font.Weight) {
                self.weight = weight

                textSecondary = PolarisTextStyle(
                    font: .system(size: 14, weight: weight),
                    color: .polarisColors.textSecondary
                )
                textPrimaryInverse = PolarisTextStyle(
                    font: .system(size: 14, weight: weight),
                    color: .polarisColors.textPrimaryInverse
                )
                interactiveTertiary = PolarisTextStyle(
                    font: .system(size: 14, weight: weight),
                    color: .polarisColors.interactiveTertiary
                )
                textPrimaryVariant = PolarisTextStyle(
                    font: .system(size: 14, weight: weight),
                    color: .polarisColors.textPrimaryVariant
                )
                textPrimaryInverseVariant = PolarisTextStyle(
                    font: .system(size: 14, weight: weight),
                    color: .polarisColors.textPrimaryInverseVariant
                )
            }
        }
    }

    public struct Footnote3 {
        public let regular = Footnote3Color(weight: .regular)
        public let medium = Footnote3Color(weight: .medium)
        
        public struct Footnote3Color {
            /// Light: [dexGray500]
            /// Dark: [dexGray400]
            public let textSecondary: PolarisTextStyle
            /// Light: [dexGray0]
            /// Dark: [dexGray850]
            public let textPrimaryInverse: PolarisTextStyle
            /// Light: [dexGray500]
            /// Dark: [dexGray400]
            public let interactiveTertiary: PolarisTextStyle
            /// Light: [dexRed400]
            /// Dark: [dexRed300]
            public let statusDanger: PolarisTextStyle                
            private let weight: Font.Weight

            init(weight: Font.Weight) {
                self.weight = weight

                textSecondary = PolarisTextStyle(
                    font: .system(size: 13, weight: weight),
                    color: .polarisColors.textSecondary
                )
                textPrimaryInverse = PolarisTextStyle(
                    font: .system(size: 13, weight: weight),
                    color: .polarisColors.textPrimaryInverse
                )
                interactiveTertiary = PolarisTextStyle(
                    font: .system(size: 13, weight: weight),
                    color: .polarisColors.interactiveTertiary
                )
                statusDanger = PolarisTextStyle(
                    font: .system(size: 13, weight: weight),
                    color: .polarisColors.statusDanger
                )
            }
        }
    }

    public struct Caption1 {
        public let regular = Caption1Color(weight: .regular)
        public let medium = Caption1Color(weight: .medium)
        public let semibold = Caption1Color(weight: .semibold)
        
        public struct Caption1Color {
            /// Light: [dexGray500]
            /// Dark: [dexGray400]
            public let textSecondary: PolarisTextStyle
            /// Light: [dexGray0]
            /// Dark: [dexGray850]
            public let textPrimaryInverse: PolarisTextStyle
            /// Light: [dexGray800]
            /// Dark: [dexGray200]
            public let textPrimary: PolarisTextStyle
            /// Light: [dexGreen500]
            /// Dark: [dexGreen400]
            public let textDecorative1: PolarisTextStyle                
            private let weight: Font.Weight

            init(weight: Font.Weight) {
                self.weight = weight

                textSecondary = PolarisTextStyle(
                    font: .system(size: 12, weight: weight),
                    color: .polarisColors.textSecondary
                )
                textPrimaryInverse = PolarisTextStyle(
                    font: .system(size: 12, weight: weight),
                    color: .polarisColors.textPrimaryInverse
                )
                textPrimary = PolarisTextStyle(
                    font: .system(size: 12, weight: weight),
                    color: .polarisColors.textPrimary
                )
                textDecorative1 = PolarisTextStyle(
                    font: .system(size: 12, weight: weight),
                    color: .polarisColors.textDecorative1
                )
            }
        }
    }

    public struct Caption2 {
        public let medium = Caption2Color(weight: .medium)
        
        public struct Caption2Color {
            /// Light: [dexGray0]
            /// Dark: [dexGray850]
            public let textPrimaryInverse: PolarisTextStyle
            /// Light: [dexGray500]
            /// Dark: [dexGray400]
            public let textSecondary: PolarisTextStyle                
            private let weight: Font.Weight

            init(weight: Font.Weight) {
                self.weight = weight

                textPrimaryInverse = PolarisTextStyle(
                    font: .system(size: 11, weight: weight),
                    color: .polarisColors.textPrimaryInverse
                )
                textSecondary = PolarisTextStyle(
                    font: .system(size: 11, weight: weight),
                    color: .polarisColors.textSecondary
                )
            }
        }
    }

    public struct Caption3 {
        public let medium = Caption3Color(weight: .medium)
        
        public struct Caption3Color {
            /// Light: [dexGray500]
            /// Dark: [dexGray400]
            public let textSecondary: PolarisTextStyle                
            private let weight: Font.Weight

            init(weight: Font.Weight) {
                self.weight = weight

                textSecondary = PolarisTextStyle(
                    font: .system(size: 10, weight: weight),
                    color: .polarisColors.textSecondary
                )
            }
        }
    }
}
